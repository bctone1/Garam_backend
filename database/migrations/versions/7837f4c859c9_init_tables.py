"""init tables

Revision ID: 7837f4c859c9
Revises: 
Create Date: 2025-09-23 16:33:32.514633

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision: str = '7837f4c859c9'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('admin_user',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('department', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index('idx_admin_user_created', 'admin_user', ['created_at'], unique=False)
    op.create_index('idx_admin_user_email', 'admin_user', ['email'], unique=False)
    op.create_table('faq',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('question', sa.Text(), nullable=False),
    sa.Column('answer', sa.Text(), nullable=False),
    sa.Column('views', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('satisfaction_rate', sa.Numeric(precision=5, scale=2), server_default=sa.text('0'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('satisfaction_rate >= 0 AND satisfaction_rate <= 100', name='chk_faq_rate_range'),
    sa.CheckConstraint('views >= 0', name='chk_faq_views_nonneg'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('gin_trgm_faq_question','faq', [sa.text('lower(question) gin_trgm_ops')], unique=False, postgresql_using='gin')
    op.create_index('idx_faq_created', 'faq', [sa.literal_column('created_at DESC')], unique=False)
    op.create_table('knowledge',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('original_name', sa.Text(), nullable=False),
    sa.Column('type', sa.Text(), nullable=False),
    sa.Column('size', sa.BigInteger(), nullable=False),
    sa.Column('status', sa.Text(), nullable=False),
    sa.Column('preview', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("status IN ('active','processing','error')", name='chk_kdoc_status'),
    sa.CheckConstraint('size >= 0', name='chk_kdoc_size_nonneg'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(
        "gin_trgm_kdoc_name",
        "knowledge",
        [sa.text("lower(original_name) gin_trgm_ops")],
        unique=False,
        postgresql_using="gin"
    )
    op.create_index(
        "gin_trgm_kdoc_preview",
        "knowledge",
        [sa.text("lower(preview) gin_trgm_ops")],
        unique=False,
        postgresql_using="gin"
    )
    op.create_index('idx_kdoc_created_at', 'knowledge', [sa.literal_column('created_at DESC')], unique=False)
    op.create_table('model',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('provider_name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('features', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('status_text', sa.Text(), nullable=False),
    sa.Column('accuracy', sa.Numeric(precision=5, scale=2), server_default=sa.text('0'), nullable=False),
    sa.Column('avg_response_time_ms', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('month_conversations', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('uptime_percent', sa.Numeric(precision=5, scale=2), server_default=sa.text('0'), nullable=False),
    sa.Column('response_style', sa.Text(), server_default=sa.text("'professional'"), nullable=False),
    sa.Column('block_inappropriate', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('restrict_non_tech', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('fast_response_mode', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('suggest_agent_handoff', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("response_style IN ('professional','friendly','concise')", name='chk_model_response_style'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_model_active', 'model', [sa.literal_column('is_active DESC')], unique=False)
    op.create_index('idx_model_provider', 'model', ['provider_name'], unique=False)
    op.create_index('uq_model_active_one', 'model', [sa.literal_column('(true)')], unique=True, postgresql_where=sa.text('is_active'))
    op.create_table('system_setting',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('welcome_title', sa.Text(), nullable=False),
    sa.Column('welcome_message', sa.Text(), nullable=False),
    sa.Column('operating_hours', sa.Text(), server_default=sa.text("'business'"), nullable=False),
    sa.Column('file_upload_mode', sa.Text(), server_default=sa.text("'true'"), nullable=False),
    sa.Column('session_duration', sa.Text(), server_default=sa.text("'60'"), nullable=False),
    sa.Column('max_messages', sa.Text(), server_default=sa.text("'30'"), nullable=False),
    sa.Column('emergency_phone', sa.Text(), nullable=False),
    sa.Column('emergency_email', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("file_upload_mode IN ('true','images','false')", name='chk_sys_file_upload_mode'),
    sa.CheckConstraint("max_messages IN ('10','30','50','unlimited')", name='chk_sys_max_messages'),
    sa.CheckConstraint("operating_hours IN ('24/7','business','extended')", name='chk_sys_operating_hours'),
    sa.CheckConstraint("session_duration IN ('30','60','120','unlimited')", name='chk_sys_session_duration'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_system_setting_updated_at', 'system_setting', [sa.literal_column('updated_at DESC')], unique=False)
    op.create_table('chat_session',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('ended_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('preview', sa.Text(), nullable=True),
    sa.Column('resolved', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('model_id', sa.BigInteger(), nullable=True),
    sa.CheckConstraint('ended_at IS NULL OR ended_at >= created_at', name='chk_chat_session_time'),
    sa.ForeignKeyConstraint(['model_id'], ['model.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_chat_session_model_id', 'chat_session', ['model_id'], unique=False)
    op.create_index('idx_chat_session_resolved_started', 'chat_session', ['resolved', sa.literal_column('created_at DESC')], unique=False)
    op.create_index('idx_chat_session_started_at', 'chat_session', [sa.literal_column('created_at DESC')], unique=False)
    op.create_table('inquiry',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('customer_name', sa.String(), nullable=False),
    sa.Column('company', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('status', sa.String(), server_default='new', nullable=False),
    sa.Column('assignee_admin_id', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('customer_satisfaction', sa.String(), nullable=True),
    sa.CheckConstraint("customer_satisfaction IS NULL OR customer_satisfaction IN ('satisfied','unsatisfied')", name='chk_inquiry_customer_satisfaction'),
    sa.CheckConstraint("status <> 'completed' OR completed_at IS NOT NULL", name='chk_inquiry_completion_consistency'),
    sa.CheckConstraint("status IN ('new','processing','on_hold','completed')", name='chk_inquiry_status'),
    sa.CheckConstraint('(assignee_admin_id IS NULL AND assigned_at IS NULL) OR (assignee_admin_id IS NOT NULL AND assigned_at IS NOT NULL)', name='chk_inquiry_assignment_consistency'),
    sa.CheckConstraint('assigned_at IS NULL OR assigned_at >= created_at', name='chk_inquiry_assigned_after_created'),
    sa.CheckConstraint('completed_at IS NULL OR completed_at >= COALESCE(assigned_at, created_at)', name='chk_inquiry_completed_after_assigned'),
    sa.ForeignKeyConstraint(['assignee_admin_id'], ['admin_user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_inquiry_assignee_status', 'inquiry', ['assignee_admin_id', 'status', 'created_at'], unique=False)
    op.create_index('idx_inquiry_created', 'inquiry', ['created_at'], unique=False)
    op.create_index('idx_inquiry_status_created', 'inquiry', ['status', 'created_at'], unique=False)
    op.create_table('knowledge_page',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('knowledge_id', sa.BigInteger(), nullable=False),
    sa.Column('page_no', sa.Integer(), nullable=False),
    sa.Column('image_url', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('page_no >= 1', name='chk_kpage_page_no_ge_1'),
    sa.ForeignKeyConstraint(['knowledge_id'], ['knowledge.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('knowledge_id', 'page_no', name='uq_kpage_doc_page')
    )
    op.create_index('idx_docpage_doc_page', 'knowledge_page', ['knowledge_id', 'page_no'], unique=False)
    op.create_table('quick_category',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('setting_id', sa.BigInteger(), nullable=False),
    sa.Column('icon_emoji', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('sort_order', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('sort_order >= 0', name='chk_qc_sort_nonneg'),
    sa.ForeignKeyConstraint(['setting_id'], ['system_setting.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_qc_setting', 'quick_category', ['setting_id'], unique=False)
    op.create_index('idx_qc_setting_order', 'quick_category', ['setting_id', 'sort_order'], unique=False)
    op.create_table('inquiry_history',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('inquiry_id', sa.BigInteger(), nullable=False),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('admin_id', sa.BigInteger(), nullable=True),
    sa.Column('to_admin_id', sa.BigInteger(), nullable=True),
    sa.Column('details', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("action <> 'transfer' OR to_admin_id IS NOT NULL", name='chk_inqh_transfer_consistency'),
    sa.CheckConstraint("action IN ('assign','on_hold','resume','transfer','complete','note','contact','delete')", name='chk_inqh_action'),
    sa.ForeignKeyConstraint(['admin_id'], ['admin_user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['inquiry_id'], ['inquiry.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['to_admin_id'], ['admin_user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_inqh_action_time', 'inquiry_history', ['action', 'created_at'], unique=False)
    op.create_index('idx_inqh_admin_time', 'inquiry_history', ['admin_id', 'created_at'], unique=False)
    op.create_index('idx_inqh_inquiry_time', 'inquiry_history', ['inquiry_id', 'created_at'], unique=False)
    op.create_table('knowledge_chunk',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('knowledge_id', sa.BigInteger(), nullable=False),
    sa.Column('page_id', sa.BigInteger(), nullable=True),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('chunk_text', sa.Text(), nullable=False),
    sa.Column('vector_memory', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('chunk_index >= 1', name='chk_kchunk_index_ge_1'),
    sa.ForeignKeyConstraint(['knowledge_id'], ['knowledge.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['page_id'], ['knowledge_page.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('knowledge_id', 'chunk_index', name='uq_kchunk_doc_idx')
    )
    op.create_index('idx_chunk_doc_index', 'knowledge_chunk', ['knowledge_id', 'chunk_index'], unique=False)
    op.create_index('idx_chunk_doc_page', 'knowledge_chunk', ['knowledge_id', 'page_id'], unique=False)
    op.create_index('idx_kchunk_vec_ivfflat', 'knowledge_chunk', ['vector_memory'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'vector_memory': 'vector_cosine_ops'})
    op.create_table('message',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.BigInteger(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('response_latency_ms', sa.Integer(), nullable=True),
    sa.Column('vector_memory', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=False),
    sa.Column('extra_data', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("(role = 'user' AND response_latency_ms IS NULL) OR (role = 'bot' AND (response_latency_ms IS NULL OR response_latency_ms >= 0))", name='chk_message_latency_rule'),
    sa.CheckConstraint("role IN ('user','bot')", name='chk_message_role'),
    sa.ForeignKeyConstraint(['session_id'], ['chat_session.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_message_role_created', 'message', ['role', 'created_at'], unique=False)
    op.create_index('idx_message_session_created', 'message', ['session_id', 'created_at'], unique=False)
    op.create_table('feedback',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.BigInteger(), nullable=True),
    sa.Column('message_id', sa.BigInteger(), nullable=True),
    sa.Column('rating', sa.String(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("rating IN ('helpful','not_helpful')", name='chk_feedback_rating'),
    sa.CheckConstraint('(session_id IS NOT NULL) <> (message_id IS NOT NULL)', name='chk_feedback_anchor_xor'),
    sa.ForeignKeyConstraint(['message_id'], ['message.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['session_id'], ['chat_session.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_feedback_created', 'feedback', ['created_at'], unique=False)
    op.create_index('idx_feedback_message', 'feedback', ['message_id'], unique=False)
    op.create_index('idx_feedback_rating_time', 'feedback', ['rating', 'created_at'], unique=False)
    op.create_index('idx_feedback_session', 'feedback', ['session_id', 'created_at'], unique=False)
    op.create_index('uq_feedback_message_once', 'feedback', ['message_id'], unique=True, postgresql_where=sa.text('message_id IS NOT NULL'))
    op.create_index('uq_feedback_session_once', 'feedback', ['session_id'], unique=True, postgresql_where=sa.text('session_id IS NOT NULL'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('uq_feedback_session_once', table_name='feedback', postgresql_where=sa.text('session_id IS NOT NULL'))
    op.drop_index('uq_feedback_message_once', table_name='feedback', postgresql_where=sa.text('message_id IS NOT NULL'))
    op.drop_index('idx_feedback_session', table_name='feedback')
    op.drop_index('idx_feedback_rating_time', table_name='feedback')
    op.drop_index('idx_feedback_message', table_name='feedback')
    op.drop_index('idx_feedback_created', table_name='feedback')
    op.drop_table('feedback')
    op.drop_index('idx_message_session_created', table_name='message')
    op.drop_index('idx_message_role_created', table_name='message')
    op.drop_table('message')
    op.drop_index('idx_kchunk_vec_ivfflat', table_name='knowledge_chunk', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'vector_memory': 'vector_cosine_ops'})
    op.drop_index('idx_chunk_doc_page', table_name='knowledge_chunk')
    op.drop_index('idx_chunk_doc_index', table_name='knowledge_chunk')
    op.drop_table('knowledge_chunk')
    op.drop_index('idx_inqh_inquiry_time', table_name='inquiry_history')
    op.drop_index('idx_inqh_admin_time', table_name='inquiry_history')
    op.drop_index('idx_inqh_action_time', table_name='inquiry_history')
    op.drop_table('inquiry_history')
    op.drop_index('idx_qc_setting_order', table_name='quick_category')
    op.drop_index('idx_qc_setting', table_name='quick_category')
    op.drop_table('quick_category')
    op.drop_index('idx_docpage_doc_page', table_name='knowledge_page')
    op.drop_table('knowledge_page')
    op.drop_index('idx_inquiry_status_created', table_name='inquiry')
    op.drop_index('idx_inquiry_created', table_name='inquiry')
    op.drop_index('idx_inquiry_assignee_status', table_name='inquiry')
    op.drop_table('inquiry')
    op.drop_index('idx_chat_session_started_at', table_name='chat_session')
    op.drop_index('idx_chat_session_resolved_started', table_name='chat_session')
    op.drop_index('idx_chat_session_model_id', table_name='chat_session')
    op.drop_table('chat_session')
    op.drop_index('idx_system_setting_updated_at', table_name='system_setting')
    op.drop_table('system_setting')
    op.drop_index('uq_model_active_one', table_name='model', postgresql_where=sa.text('is_active'))
    op.drop_index('idx_model_provider', table_name='model')
    op.drop_index('idx_model_active', table_name='model')
    op.drop_table('model')
    op.drop_index('idx_kdoc_created_at', table_name='knowledge')
    op.drop_index('gin_trgm_kdoc_preview', table_name='knowledge', postgresql_using='gin')
    op.drop_index('gin_trgm_kdoc_name', table_name='knowledge', postgresql_using='gin')
    op.drop_table('knowledge')
    op.drop_index('idx_faq_created', table_name='faq')
    op.drop_index('gin_trgm_faq_question', table_name='faq', postgresql_using='gin')
    op.drop_table('faq')
    op.drop_index('idx_admin_user_email', table_name='admin_user')
    op.drop_index('idx_admin_user_created', table_name='admin_user')
    op.drop_table('admin_user')
    # ### end Alembic commands ###
